// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"
)

type IssueStatuses string

const (
	IssueStatusesTodo       IssueStatuses = "todo"
	IssueStatusesInProgress IssueStatuses = "in_progress"
	IssueStatusesDone       IssueStatuses = "done"
)

func (e *IssueStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IssueStatuses(s)
	case string:
		*e = IssueStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for IssueStatuses: %T", src)
	}
	return nil
}

type NullIssueStatuses struct {
	IssueStatuses IssueStatuses
	Valid         bool // Valid is true if IssueStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIssueStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.IssueStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IssueStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIssueStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IssueStatuses), nil
}

type Issue struct {
	ID        int64
	Summary   string
	Content   string
	Status    IssueStatuses
	CreatedAt interface{}
	UpdatedAt interface{}
	DeletedAt interface{}
}

type IssuesTag struct {
	IssueID int64
	TagID   int64
}

type Tag struct {
	ID   int64
	Name string
}

type User struct {
	ID        int64
	FirstName string
	LastName  string
	Username  string
	Email     string
	Password  string
	CreatedAt interface{}
	UpdatedAt interface{}
	DeletedAt interface{}
}
