// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO issues (id, title, content) 
VALUES ($1, $2, $3)
RETURNING id, title, content
`

type CreateIssueParams struct {
	ID      int64
	Title   string
	Content pgtype.Text
}

func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRow(ctx, createIssue, arg.ID, arg.Title, arg.Content)
	var i Issue
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const getIssueById = `-- name: GetIssueById :one
select id, title, content
from issues
where id = $1
`

func (q *Queries) GetIssueById(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRow(ctx, getIssueById, id)
	var i Issue
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const getIssues = `-- name: GetIssues :many
select id, title, content 
from issues
`

func (q *Queries) GetIssues(ctx context.Context) ([]Issue, error) {
	rows, err := q.db.Query(ctx, getIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(&i.ID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
